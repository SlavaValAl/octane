#!/bin/bash

[ "$1" == "-d" ] && {
    set -x
    shift
}

usage() {
    echo "Usage: $(basename $0) [-d] COMMAND ENV_ID [ENV_ID]
COMMAND:
prepare-fuel                    - install packages and patch source code on Fuel
                                  master node
clone ENV_ID                    - clone envinroment settings and return seed env ID
provision ENV_ID                - start provisioning of nodes in seed env
prepare ORIG_ID SEED_ID         - prepare provisioned seed env CICs for isolated deployment
deploy ENV_ID                   - start deployment of nodes in seed env with isolation
upgrade-env ENV_ID              - install upgrade seed env for env ENV_ID and
                                  copy state from ENV_ID to upgrade seed env
upgrade-cics ORIG_ID SEED_ID    - isolate orig env CICs and replace them with seed CICs
upgrade-db ORIG_ID SEED_ID      - migrate and upgrade state databases data
upgrade-ceph ORIG_ID SEED_ID    - update Ceph cluster configuration
upgrade-node ENV_ID NODE_ID     - move a node NODE_ID to env ENV_ID and upgrade the node
cleanup ENV_ID                  - delete data about former environment from
                                  upgraded OpenStack cloud
help                            - display this message and exit"
}

KEY=0 # Start value for GRE port keys in OVS configuration
NODE_ID=0 # This constant stores ID of a node after it is reassigned to the seed
          # environment
export FUEL_CACHE="/tmp/octane/deployment" # Directory to store deployment information
export PUPPET_PATH="/etc/puppet/2014.2.2-6.1/modules"

export CWD="$(dirname $(dirname `readlink -f "$0"`))"
export BINPATH="$CWD/bin"
export LIBPATH="$CWD/lib"
export HELPER_PATH="$CWD/helpers"
export PATCH_DIR="$CWD/patches"

. ${LIBPATH}/utils.sh
. ${LIBPATH}/nailgundb.sh
. ${LIBPATH}/functions.sh
. ${LIBPATH}/db.sh
. ${LIBPATH}/maintenance.sh
. ${LIBPATH}/patch.sh

[ -z "$1" ] && die "$(usage)"

case $1 in
    prepare-fuel)
        [ -d $FUEL_CACHE ] || mkdir -p $FUEL_CACHE
        yum -y install postgresql.x86_64 pssh patch percona-xtrabackup.x86_64
        patch_fuel_components astute puppet pman
        ;;
    upgrade-env)
        [ -z "$2" ] && die "$(usage)"
        upgrade_env $2
        ;;
    # TODO(ogelbukh) Delete 'provision' subcommand as obsoleted by 'upgrade-env'
    # subcommand.
    provision)
        [ -z "$2" ] && die "$(usage)"
        discover_nodes_to_cics $2
        for node in $(list_nodes $2 'controller' 'discover')
            do
                node_id=$(echo $node | cut -d '-' -f2)
                provision_node $node_id
            done
        ;;
    # TODO(ogelbukh) Delete 'prepare' subcommand as obsoleted by 'upgrade-env'
    # subcommand.
    prepare)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        prepare_seed_deployment_info_nailgun $2 $3
        create_ovs_bridges $3
        ;;
    # TODO(ogelbukh) Delete 'deploy' subcommand as obsoleted by 'upgrade-env'
    # subcommand.
    deploy)
        [ -z "$2" ] && die "$(usage)"
        for br_name in br-ex br-mgmt
            do
                create_tunnels $2 $br_name '(controller|compute|ceph-osd)'
            done
        env_action $2 deploy
        ;;
    upgrade-cics)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        upgrade_cics $2 $3
        ;;
    upgrade-db)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        upgrade_db $2 $3
        ;;
    upgrade-ceph)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        upgrade_ceph $2 $3
        ;;
    prepare-osd-upgrade)
    # TODO(ogelbukh) Delete this subcommand, it is included in 'upgrade-ceph'
    # command functions.
        [ -z "$2" ] && die "$(usage)"
        prepare_ceph_osd_upgrade $2;
        ;;
    upgrade-node)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        upgrade_node $2 $3;
        ;;
    upgrade-nova-compute)
        [ -z "$2" ] && die "$(usage)"
        list_nodes $2 compute \
        | xargs -I{} ./upgrade-nova-compute.sh {}
        ;;
    cleanup)
        [ -z "$2" ] && die "$(usage)"
        cleanup_nova_services $2
        cleanup_neutron_services $2
        ;;
    help)
        usage
        ;;
     *)
        echo "Invalid command: $1"
        usage
        exit 1
        ;;
esac

exit 0
# vi:sw=4:ts=4:
