#!/bin/bash

cd $(dirname $0)
. functions

[ "$1" == "-d" ] && {
    set -x
    shift
}

usage() {
    echo "Usage: $(basename $0) [-d] COMMAND ENV_ID [ENV_ID]
COMMAND:
prepare-fuel                    - install packages and patch source code on Fuel
                                  master node
clone ENV_ID                    - clone envinroment settings and return seed env ID
provision ORIG_ID SEED_ID       - start provisioning of nodes in seed env
prepare ORIG_ID SEED_ID         - prepare provisioned seed env CICs for isolated deployment
deploy ENV_ID                   - start deployment of nodes in seed env with isolation
upgrade-cics ORIG_ID SEED_ID    - isolate orig env CICs and replace them with seed CICs
upgrade-db ORIG_ID SEED_ID      - migrate and upgrade state databases data
upgrade-ceph ORIG_ID SEED_ID    - update Ceph cluster configuration
prepare-osd-upgrade SEED_ID     - configure Ceph cluster before OSD upgrade
upgrade-node ENV_ID NODE_ID     - move a node NODE_ID to env ENV_ID and upgrade the node
upgrade-nova-compute NODE_ID    - update nova and neutron packages on the compute
                                  node NODE_ID and restart services
cleanup ENV_ID                  - delete data about former environment from
                                  upgraded OpenStack cloud
help                            - display this message and exit"
}

KEY=0
[ -z "$1" ] && die "$(usage)"

case $1 in
    prepare-fuel)
        [ -d $FUEL_CACHE ] || mkdir -p $FUEL_CACHE
        yum -y install postgresql.x86_64 pssh patch
        ./patch-fuel-manifests.sh
        ../patches/pman/update.sh
        ../patches/puppet/update.sh
        ;;
    clone)
        [ -z "$2" ] && die "$(usage)"
        SEED_ENV="$(clone_env $2)"
        copy_generated_settings $2 $SEED_ENV
        echo "6.0 seed environment ID is $SEED_ENV"
        ;;
    install-seed)
        shift
        install_seed "$@"
        ;;
    provision)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        prepare_cic_disk_fixture $2
        prepare_cic_network_fixture $2
        discover_nodes_to_cics $3
        for node in $(list_nodes $3 'controller' 'discover')
            do
                node_id=$(echo $node | cut -d '-' -f2)
                provision_node $node_id
            done
        ;;
    prepare)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        prepare_seed_deployment_info $2 $3
        create_ovs_bridges $3
        ;;
    prepare-nailgun)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        for br_name in br-ex br-mgmt
            do
                update_ips_nailgun_db $2 $3 $br_name
                update_vip_nailgun_db $2 $3 $br_name
            done
        get_deployment_info $3
        backup_deployment_info $3
        disable_ping_checker $3
        remove_patch_transformations $3
        remove_predefined_networks $3
        upload_deployment_info $3
        create_ovs_bridges $3
        ;;
    deploy)
        [ -z "$2" ] && die "$(usage)"
        for br_name in br-ex br-mgmt
            do
                create_tunnels $2 $br_name '(controller|compute|ceph-osd)'
            done
        env_action $2 deploy
        ;;
    upgrade-cics)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        check_deployment_status $3
        ./manage_services.sh start $3
        # Wait for corosync cluster to sync and start, and for Neutron to create
        # all network resources on 6.0 CICs
        sleep 120
        for br_name in br-ex br-mgmt br-prv
            do
                delete_patch_ports $2 $br_name
            done
        for br_name in br-ex br-mgmt
            do
                create_tunnels $2 $br_name
            done
        for br_name in br-ex br-mgmt
            do
                remove_tunnels $3 $br_name
                create_patch_ports $3 $br_name
            done
        ;;
    upgrade-db)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        ./delete_fuel_resources.sh $3
        ./manage_services.sh stop $3
        ./manage_services.sh disable $2
        ./upgrade-db.sh $2 $3
        ;;
    upgrade-ceph)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        ./migrate-ceph-mon.sh $2 $3
        import_bootstrap_osd $3
        ;;
    prepare-osd-upgrade)
        [ -z "$2" ] && die "$(usage)"
        prepare_ceph_osd_upgrade $2;
        ;;
    upgrade-node)
        [ -z "$2" ] && die "$(usage)"
        [ -z "$3" ] && die "$(usage)"
        upgrade_node $2 $3;
        ;;
    upgrade-nova-compute)
        [ -z "$2" ] && die "$(usage)"
        list_nodes $2 compute \
        | xargs -I{} ./upgrade-nova-compute.sh {}
        ;;
    cleanup)
        [ -z "$2" ] && die "$(usage)"
        cleanup_nova_services $2
        cleanup_neutron_services $2
        ;;
    help)
        usage
        ;;
     *)
        echo "Invalid command: $1"
        usage
        exit 1
        ;;
esac

exit 0
# vi:sw=4:ts=4:
