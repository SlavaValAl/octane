#!/bin/bash

die() {
    echo $1
    exit ${2:-1}
}

clone_env() {
# Clone settings of the environment specified by ID in the first argument using
# helper Python script `clone-env'
    local env_name
    [ -z $1 ] && die "Cannot clone environment with empty ID, exiting"
    env_name=$(fuel env --env $1 | awk '/(new|operational)/ {print $5}')
    [ -n "$env_name" ] || die "No environment found with ID $1, exiting"
    [ -d "./$env_name" ] && rm -r "./$env_name"
    echo $(./clone-env --upgrade $env_name)
}

get_ips_from_cics() {
# Return a list of addresses assigned to the bridge identified by its name in
# the first argument on nodes in the original environment.
    [ -z "$1" ] && die "No environment ID and bridge name, exiting"
    [ -z "$2" ] && die "No bridge name, exiting"
    echo $(fuel nodes --env $1 \
        | grep controller \
        | cut -d\| -f5  \
        | xargs -I{} ssh root@{} ip addr\
        | awk '/'$2':/ {getline; getline; print $2}' \
        | sed -re 's%([^/]+)/[0-9]{2}%\1%')
}

get_vip_from_cics() {
# Return VIP of the given type (management or external) assgined to the original
# environment.
    local br_name
    [ -z "$1" ] && die "No environment ID and bridge name provided, exiting"
    br_name=$(echo ${2:-br-mgmt} \
        | awk '/br-ex/ {print "hapr-p"} \
        /br-mgmt/ {print "hapr-m"}')
    [ -n "$1" ] && echo $(fuel nodes --env-id $1 \
            | grep controller \
            | cut -d\| -f5  \
            | xargs -I{} ssh root@{} ip netns exec haproxy ip addr\
            | awk '/'$br_name':/ {getline; getline; print $2}' \
            | sed -re 's%([^/]+)/[0-9]{2}%\1%')
}

get_deployment_info() {
# Download deployment config from Fuel master for environment ENV to subdir in
# current directory. Skip download if the directory already exists.
    [ -z "$1" ] && die "No environment ID provided, exiting"
    test -d ./deployment_$1 || fuel --env $1 deployment default
}

get_ips_from_deploy_info() {
# Returns a list of addresses that Fuel wants to assign to nodes in the 6.0
# deployment. These addresses must be replaced with addresses from the original
# environment.
    local br_name
    [ -z "$1" ] && die "No environment ID and bridge name provided, exiting"
    [ -z "$2" ] && die "No bridge name provided, exiting"
    echo $(grep -A2 $2: ./deployment_$1/*controller* \
        | sed -nre 's%.*- (([0-9]{1,3}\.){3}[0-9]{1,3})/[0-9]{1,2}.*%\1%p')
}

get_vip_from_deploy_info() {
# Returns a VIP of given type that Fuel wants to assign to the 6.0 environment
# and that we want to replace with original VIP.
    local br_name
    [ -z "$1" ] && die "No environment ID and bridge name provided, exiting"
    br_name=$(echo ${2:-br-mgmt} \
        | awk '/br-ex/ {print "public_vip:"} \
        /br-mgmt/ {print "management_vip:"}')
    [ -z "$br_name" ] && die "No bridge name provided, exiting"
    [ -n "$br_name" ] && echo $(grep $br_name ./deployment_$1/primary-controller* \
        | awk '{print $2}')
}

upload_deployment_info() {
# Upload deployment configration with modifications to Fuel master for
# environment ENV.
    [ -z "$1" ] && die "No environment ID provided, exiting"
    [ -d "./deployment_$1" ] && fuel --env $1 deployment upload
}

replace_ip_addresses() {
# Replace IP addresses assigned to new env's controllers and VIPs with addresses
# of the original environment in deployment config dump.
    local dirname
    local orig_ips
    local orig_vip
    local seed_vip
    local orig_ip
    local seed_ip
    local orig_id
    local seed_id
    local br_name
    [ -z "$1" ] && die "No orig, seed env IDs, bridge name and IP addresses provided, exiting"
    orig_id=$1
    [ -z "$2" ] && die "No seed env ID, bridge name and IP addresses provided, exiting"
    seed_id=$2
    dirname=deployment_${seed_id}
    [ -z "$3" ] && die "No bridge name and IP addresses provided, exiting"
    br_name=$3
    orig_ips=$(get_ips_from_cics $orig_id $br_name)
    shift 3
    for orig_ip in $orig_ips
        do
            if [ -n "$*" ]
                then
                    seed_ip=$1
                    sed -i "s%$seed_ip%$orig_ip%" $dirname/*.yaml
                    shift
                fi
        done
    orig_vip=$(get_vip_from_cics $orig_id $br_name)
    seed_vip=$(get_vip_from_deploy_info $seed_id $br_name)
    sed -i "s%$seed_vip%$orig_vip%" $dirname/*.yaml
}

remove_patch_transformations() {
# Remove add-patch actions for br-ex, br-mgmt bridges. Required to isolate new
# controllers from original environment while physically connected to the same
# L2 segment.
    [ -z "$1" ] && die "No env ID provided, exiting"
    cp -R deployment_$1 deployment_$1.orig
    python ../helpers/transformations.py deployment_$1
}

prepare_deployment_info() {
# Prepare deployment configuration of Fuel environment.
    local br_name
    local discard_ips
    [ -z "$1" ] && "No orig and seed env ID provided, exiting"
    [ -z "$2" ] && "No seed env ID provided, exiting"
    get_deployment_info $2
    for br_name in br-ex br-mgmt
        do
            discard_ips=$(get_ips_from_deploy_info $2 $br_name)
            replace_ip_addresses $1 $2 $br_name $discard_ips
        done
    remove_patch_transformations $2
    upload_deployment_info $2
}

list_nodes() {
    [ -z "$1" ] && die "No env ID provided, exiting"
    roles_re=${2:-controller}
    echo $(fuel node --env $1 | awk '/'$roles_re'/ {print "node-" $1}')
}

create_ovs_bridges() {
    local nodes
    local node
    [ -z "$1" ] && die "No env ID provided, exiting"
    nodes=$(list_nodes $1 '(controller)')
    for node in $nodes
        do
            ssh root@$node apt-get -y install openvswitch-switch
            [ $? -ne 0 ] && die "Cannot install openvswitch, exiting"
            for br_name in br-ex br-mgmt
                do
                    ssh root@$node ovs-vsctl add-br $br_name
                    ssh root@$node ip link set dev $br_name mtu 1450
                done
        done
}

tunnel_from_to() {
# Configure GRE tunnels between 2 nodes. Nodes are specified by their hostnames
# (e.g. node-2). Every tunnel must have unique key to avoid conflicting
# configurations.
    local src_node
    local dst_node
    local br_name
    local remote_ip
    local gre_port
    local key
    [ -z "$1" ] && die "No tunnel paramters provided, exiting"
    src_node=$1
    [ -z "$2" ] && die "No tunnel remote parameters provided, exiting"
    dst_node=$2
    [ -z "$3" ] && die "No bridge name provided, exiting"
    br_name=$3
    key=${4:-0}
    remote_ip=$(host $dst_node | grep -Eo '([0-9\.]+)$')
    [ -z "$remote_ip" ] && die "Tunnel remote host $dst_node not found, exiting"
    gre_port=$br_name--gre-$dst_node
    ssh root@$src_node ovs-vsctl add-port $br_name $gre_port -- \
        set Interface $gre_port type=gre options:remote_ip=$remote_ip \
        options:key=$key
}

create_tunnels() {
# Create tunnels between nodes in the new environment to ensure isolation from
# management and public network of original environment and retain connectivity
# in the 6.0 environment.
    local br_name
    local primary
    local nodes
    local node
    [ -z "$1" ] && die "No env ID provided, exiting"
    br_name=$2
    roles_re=${3:-'controller'}
    nodes=$(list_nodes $1 "$roles_re")
    primary=$(echo $nodes | cut -d ' ' -f1)
    for node in $nodes
        do
            [ "$node" == "$primary" ] || {
                tunnel_from_to $primary $node $br_name $KEY
                tunnel_from_to $node $primary $br_name $KEY
                KEY=$(expr $KEY + 1)
            }
        done
}

get_nailgun_db_pass() {
# Parse nailgun configuration to get DB password for 'nailgun' database. Return
# the password.
    echo $(dockerctl shell nailgun cat /etc/nailgun/settings.yaml \
        | awk 'BEGIN {out=""}
               /DATABASE/ {out=$0;next}
               /passwd:/ {if(out!=""){out="";print $2}}' \
        | tr -d '"')
}

copy_generated_settings() {
# Update configuration of 6.0 environment in Nailgun DB to preserve generated
# parameters values from the original environmen.
    local db_pass
    local generated
    db_pass=$(get_nailgun_db_pass)
    [ -z "$1" ] && die "No 5.1 env ID provided, exiting"
    [ -z "$2" ] && die "No 6.0 env ID provided, exiting"
    generated=$(echo "select generated from attributes where cluster_id = $1;
select generated from attributes where cluster_id = $2;" \
        | psql -t postgresql://nailgun:$db_pass@localhost/nailgun \
        | grep -v ^$ \
        | python ../helpers/join-jsons.py);
    [ -z "$generated" ] && die "No generated attributes found for env $1"
    echo "update attributes set generated = '$generated' where cluster_id = $2" \
        | psql -t postgresql://nailgun:$db_pass@localhost/nailgun
}

env_action() {
# Start deployment or provisioning of all nodes in the environment, depending on
# second argument. First argument is an ID of env.
    local node_ids
    local mode
    [ -z "$1" ] && die "No 6.0 env ID provided, exiting"
    node_ids=$(fuel node --env $1 \
        | awk 'BEGIN {f = ""}
        /(controller|compute|ceph)/ {
            if (f == "") {f = $1}
            else {printf f","; f = $1}
        }
        END {printf f}')
    fuel node --env $1 --$2 --node $node_ids
    [ $? -ne 0 ] && die "Cannot start $2 for env $1, exiting" 2
}

check_deployment_status() {
# Verify operational status of environment.
    local status
    [ -z "$1" ] && die "No env ID provided, exiting"
    status=$(fuel env --env $1 \
        | grep -Eo "^$1 \| [^\|]+" \
        | cut -d' ' -f3)
    [ "$status" == 'new' ] || die "Environment is not operational, exiting"
}

check_vip_down() {
    local vip
    [ -z "$1" ] && die "No env ID and bridge name provided, exiting"
    [ -z "$2" ] && die "No bridge name provided, exiting"
    vip=$(get_vip_from_cics $1 $2)
    [ -n "$vip" ] && die "VIP is not down, exiting" 3
}

vips_down() {
    local nodes
    local node
    [ -z "$1" ] && die "No env ID and bridge name provided, exiting"
    nodes=$(list_nodes $1 'controller')
    for node in $nodes
        do
            echo vip__management vip__public vip__management_old vip__public_old \
                | xargs -I{} -d ' ' \
                ssh root@$node crm resource stop {}
        done
}

delete_tunnel() {
# Delete tunnel between src_node and dst_node.
    local src_node
    local dst_node
    local br_name
    local gre_port
    [ -z "$1" ] && die "No tunnel parameters provided, exiting"
    src_node=$1
    [ -z "$2" ] && die "Bridge name not specified"
    br_name=$2
    gre_port=$br_name--gre
    list_ports $src_node $br_name \
        | grep $gre_port \
        | xargs -I{} ssh root@$src_node ovs-vsctl del-port $br_name {}
    [ $? -ne 0 ] && die "Cannot delete GRE port, exiting"
}

remove_tunnels() {
# Delete tunnels from 6.0 CICs to replace 5.1 controllers.
    local br_name
    local nodes
    local node
    [ -z "$1" ] && die "No env ID provided, exiting"
    br_name=$2
    nodes=$(list_nodes $1 'controller')
    for node in $nodes
        do
            delete_tunnel $node $br_name
        done
}

list_ports() {
# On the host identified by first argument, list ports in bridge, identified by
# second argument.
    [ -z "$1" ] && die "No hostname and bridge name provided, exiting"
    [ -z "$2" ] && die "No bridge name provided, exiting"
    echo $(ssh root@$1 ovs-vsctl list-ports $2)
}

create_patch_ports() {
# Create patch interface to connect logical interface to Public or Management
# network to the physical interface to that network.
    local br_name
    local ph_name
    local nodes
    local node
    local node_id
    local filename
    [ -d ./deployment_$1.orig ] || die "Deployment information not found for env $1, exiting"
    [ -z "$1" ] && die "No env ID provided, exiting"
    br_name=$2
    nodes=$(list_nodes $1 'controller')
    for node in $nodes
        do
            node_id=$(echo $node | awk -F"-" '{print $2}')
            filename=$(ls deployment_$1.orig/*_$node_id.yaml)
            ./create-patch-ports $filename $br_name \
                | xargs -I {} ssh root@$node {}
        done
}

delete_patch() {
    local br_name
    local ph_name
    local node_ids
    local node_id
    local node
    [ -z "$1" ] && die "No env ID and bridge name provided, exiting"
    [ -z "$2" ] && die "No bridge name provided, exiting"
    br_name=$2
    for node in $(list_nodes $1 controller)
        do
            ph_name=$(list_ports $node $br_name \
                | tr -d '"' \
                | sed -nre 's/'$br_name'--(.*)/\1/p')

            ssh root@${node} ovs-vsctl del-port $br_name ${br_name}--${ph_name}
            ssh root@${node} ovs-vsctl del-port $ph_name ${ph_name}--${br_name}
        done
}

isolate_old_controllers() {
# Apply isolation to old controllers in a similar fashion as to new controllers.
    local br_name
    [ -z "$1" ] && die "No env ID provided, exiting"
    br_name=$2
    create_tunnels $1 $br_name 'controller'
}

apply_disk_settings() {
    [ -z "$1" ] && die "No node ID provided, exiting"
    disk_file="./node_$1/disks.yaml"
    fuel node --node $1 --disk --download
    ./copy-node-settings disks $disk_file ./disks.fixture.yaml \
        > /tmp/disks_$1.yaml
    mv /tmp/disks_$1.yaml $disk_file
    fuel node --node $1 --disk --upload
}

apply_network_settings() {
    [ -z "$1" ] && die "No node ID provided, exiting"
    iface_file="./node_$1/interfaces.yaml"
    fuel node --node $1 --network --download
    ./copy-node-settings interfaces $iface_file \
        ./interfaces.fixture.yaml > /tmp/interfaces_$1.yaml
    mv /tmp/interfaces_$1.yaml $iface_file
    fuel node --node $1 --network --upload
}
