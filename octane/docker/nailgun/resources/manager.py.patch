diff --git a/manager.py b/manager.py
index 91200f1..b60aea3 100644
--- manager.py
+++ manager.py
@@ -224,8 +224,10 @@ class DisksFormatConvertor(object):
         volume_manager = node.volume_manager
         for disk in disks:
             for volume in disk['volumes']:
-                full_format = volume_manager.set_volume_size(
-                    disk['id'], volume['name'], volume['size'])
+                volume_manager.set_volume_size(disk['id'], volume['name'],
+                                               volume['size'])
+                full_format = volume_manager.set_volume_flags(
+                    disk['id'], volume)
 
         return full_format
 
@@ -547,6 +549,14 @@ class Disk(object):
                 volume['size'] = size
                 self.free_space -= size
 
+    def set_keep_flag(self, name, value):
+        """Set keep flag
+        """
+        for volume in self.volumes:
+            if (volume.get('type') == 'partition' and
+                    volume.get('name') == name):
+                volume['keep'] = bool(value)
+
     def reset(self):
         self.volumes = []
         self.free_space = self.size
@@ -594,16 +604,21 @@ class VolumeManager(object):
             boot_is_raid = True if disks_count > 1 else False
 
             existing_disk = filter(
-                lambda disk: d['disk'] == disk['id'],
+                lambda disk: set(d['extra']) == set(disk['extra']),
                 only_disks(self.volumes))
 
+            try:
+                disk_id = existing_disk[0]['id']
+            except KeyError as exc:
+                self.__logger('Cannot find existing disk for disk %r' % d)
+                raise exc
             disk_volumes = existing_disk[0].get(
                 'volumes', []) if existing_disk else []
 
             disk = Disk(
                 disk_volumes,
                 self.call_generator,
-                d["disk"],
+                disk_id,
                 d["name"],
                 byte_to_megabyte(d["size"]),
                 boot_is_raid=boot_is_raid,
@@ -650,6 +665,25 @@ class VolumeManager(object):
         self.__logger('Updated volume size %s' % self.volumes)
         return self.volumes
 
+    def set_volume_flags(self, disk_id, volume):
+        """Set flags of volume
+        """
+        volume_name = volume['name']
+        self.__logger('Update volume flags for disk=%s volume_name=%s' %
+                      (disk_id, volume_name))
+
+        disk = filter(lambda disk: disk.id == disk_id, self.disks)[0]
+
+        if volume_name == 'ceph':
+            disk.set_keep_flag(volume_name, volume.get('keep'))
+
+        for idx, volume in enumerate(self.volumes):
+            if volume.get('id') == disk.id:
+                self.volumes[idx] = disk.render()
+
+        self.__logger('Updated volume flags %s' % self.volumes)
+        return self.volumes
+
     def get_space_type(self, volume_name):
         """Get type of space which represents on disk
         as volume with volume_name
